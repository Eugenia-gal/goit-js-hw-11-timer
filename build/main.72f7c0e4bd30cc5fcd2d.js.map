{"version":3,"sources":["webpack:///./js/count-down-timer.js","webpack:///./js/timer-control-panel.js"],"names":["CountdownTimer","selector","targetDate","onTick","this","timerId","init","time","convertUnxToClockTime","getDeltaTime","startCountDown","alert","setInterval","deltaTime","stopCountDown","clearInterval","days","padTimeUnits","Math","floor","hours","mins","secs","timeUnit","String","padStart","getTime","Date","now","refs","clockfaceDays","document","querySelector","clockfaceHours","clockfaceMins","clockfaceSecs","startBtnEl","resetBtnEl","targetDateInputEl","timer","isActive","calendar","flatpickr","altInput","enableTime","dateFormat","upateClockFace","textContent","addEventListener","value","clear"],"mappings":"mJAAqBA,E,WACnB,cAA8C,IAAhCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAClCC,KAAKH,SAAWA,EAChBG,KAAKF,WAAaA,EAClBE,KAAKD,OAASA,EACdC,KAAKC,QAAU,K,2BAGfC,KAAA,WACI,IAAMC,EAAOH,KAAKI,sBAAsBJ,KAAKK,gBAC7CL,KAAKD,OAAOI,I,EAGlBG,eAAA,WAAiB,WACTN,KAAKK,eAAiB,EACtBE,MAAM,mCAIVP,KAAKC,QAAUO,aAAY,WACzB,IAAMC,EAAY,EAAKJ,eAEjBF,EAAO,EAAKC,sBAAsBK,GACtC,EAAKV,OAAOI,KAGd,M,EAIJO,cAAA,WACIC,cAAcX,KAAKC,SACnBD,KAAKD,OAAOC,KAAKI,sBAAsB,K,EAI3CA,sBAAA,SAAsBD,GAKtB,MAAO,CAAES,KAJIZ,KAAKa,aAAaC,KAAKC,MAAMZ,EAAO,QAIlCa,MAHDhB,KAAKa,aAAaC,KAAKC,MAAOZ,EAAO,MAAR,OAGrBc,KAFTjB,KAAKa,aAAaC,KAAKC,MAAOZ,EAAO,KAAR,MAEde,KADflB,KAAKa,aAAaC,KAAKC,MAAOZ,EAAO,IAAe,Q,EAIjEU,aAAA,SAAaM,GACb,OAAOC,OAAOD,GAAUE,SAAS,EAAG,I,EAGpChB,aAAA,WAGI,OAFsBL,KAAKF,WAAWwB,UACfC,KAAKC,O,iBC7C9BC,G,oBAAO,CACTC,cAAeC,SAASC,cAAc,2BACtCC,eAAgBF,SAASC,cAAc,4BACvCE,cAAeH,SAASC,cAAc,2BACtCG,cAAeJ,SAASC,cAAc,2BAEtCI,WAAYL,SAASC,cAAc,+BACnCK,WAAYN,SAASC,cAAc,+BACnCM,kBAAmBP,SAASC,cAAc,iBAG1CO,EAAQ,KACRC,GAAW,EAEXC,EAAWC,YAAU,cAAe,CACpCC,UAAU,EACVC,YAAY,EACZC,WAAY,cAoChB,SAASC,EAAT,GAAqD,IAA3B9B,EAA2B,EAA3BA,KAAMI,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACzCO,EAAKC,cAAciB,YAAc/B,EACjCa,EAAKI,eAAec,YAAc3B,EAClCS,EAAKK,cAAca,YAAc1B,EACjCQ,EAAKM,cAAcY,YAAczB,EApCrCO,EAAKO,WAAWY,iBAAiB,SAGjC,WACI,GAAIR,EACA,OAGJ,GAAqC,KAAjCX,EAAKS,kBAAkBW,MAEvB,YADAtC,MAAM,0CAIV6B,GAAW,GAEXD,EAAQ,IAAIvC,EAAe,CAC3BC,SAAU,WACVC,WAAY,IAAIyB,KAAKE,EAAKS,kBAAkBW,OAC5C9C,OAAQ2C,KAGFpC,oBApBVmB,EAAKQ,WAAWW,iBAAiB,SAyBjC,WACIT,EAAMzB,gBACN0B,GAAW,EACXC,EAASS,a","file":"main.72f7c0e4bd30cc5fcd2d.js","sourcesContent":["export default class CountdownTimer {\r\n  constructor({ selector, targetDate, onTick }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    this.onTick = onTick;\r\n    this.timerId = null;\r\n    }\r\n    \r\n    init() {\r\n        const time = this.convertUnxToClockTime(this.getDeltaTime());\r\n        this.onTick(time);\r\n    }\r\n\r\n  startCountDown() {\r\n      if (this.getDeltaTime() < 0) {\r\n          alert('Выберите дату не раньше текущей');\r\n          return;\r\n      }\r\n\r\n      this.timerId = setInterval(() => {\r\n        const deltaTime = this.getDeltaTime();\r\n\r\n          let time = this.convertUnxToClockTime(deltaTime);\r\n          this.onTick(time);\r\n\r\n\r\n     }, 1000);\r\n\r\n    }\r\n\r\n    stopCountDown() {\r\n        clearInterval(this.timerId);\r\n        this.onTick(this.convertUnxToClockTime(0));\r\n       \r\n    }\r\n    \r\n    convertUnxToClockTime(time) {\r\n    const days = this.padTimeUnits(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.padTimeUnits(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    const mins = this.padTimeUnits(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.padTimeUnits(Math.floor((time % (1000 * 60)) / 1000));\r\n    return { days, hours, mins, secs };\r\n    }\r\n    \r\n    padTimeUnits(timeUnit) {\r\n    return String(timeUnit).padStart(2, 0);\r\n    }\r\n    \r\n    getDeltaTime () {\r\n        const targetDateUnx = this.targetDate.getTime();\r\n        const currentDateUnx = Date.now();\r\n        return targetDateUnx - currentDateUnx;\r\n    }\r\n\r\n}\r\n \r\n\r\n\r\n\r\n\r\n\r\n","import CountdownTimer from \"./count-down-timer\";\r\nimport flatpickr from \"flatpickr\";\r\nimport \"flatpickr/dist/flatpickr.min.css\";\r\nimport \"flatpickr/dist/themes/material_green.css\";\r\n\r\nconst refs = {\r\n    clockfaceDays: document.querySelector('span[data-value=\"days\"]'),\r\n    clockfaceHours: document.querySelector('span[data-value=\"hours\"]'),\r\n    clockfaceMins: document.querySelector('span[data-value=\"mins\"]'),\r\n    clockfaceSecs: document.querySelector('span[data-value=\"secs\"]'),\r\n\r\n    startBtnEl: document.querySelector('button[data-action=\"start\"]'),\r\n    resetBtnEl: document.querySelector('button[data-action=\"reset\"]'),\r\n    targetDateInputEl: document.querySelector('#date-input'),\r\n}\r\n\r\nlet timer = null;\r\nlet isActive = false;\r\n\r\nlet calendar = flatpickr(\"#date-input\", {\r\n    altInput: true,\r\n    enableTime: true,\r\n    dateFormat: \"Y-m-d H:i\",\r\n});\r\n\r\n\r\nrefs.startBtnEl.addEventListener('click', onStartBtnClick);\r\nrefs.resetBtnEl.addEventListener('click', onResetBtnClick);\r\n\r\nfunction onStartBtnClick() {\r\n    if (isActive) {\r\n        return;\r\n    }\r\n    \r\n    if (refs.targetDateInputEl.value === \"\") {\r\n        alert(\"Выберите дату и время окончания акции!\");\r\n        return;\r\n    }\r\n\r\n    isActive = true;\r\n\r\n    timer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date(refs.targetDateInputEl.value),\r\n    onTick: upateClockFace,\r\n    });\r\n\r\n    timer.startCountDown();\r\n\r\n}\r\n\r\n\r\nfunction onResetBtnClick() {\r\n    timer.stopCountDown();\r\n    isActive = false;\r\n    calendar.clear();\r\n}\r\n\r\nfunction upateClockFace({ days, hours, mins, secs }) {\r\n    refs.clockfaceDays.textContent = days;\r\n    refs.clockfaceHours.textContent = hours;\r\n    refs.clockfaceMins.textContent = mins;\r\n    refs.clockfaceSecs.textContent = secs;\r\n}"],"sourceRoot":""}